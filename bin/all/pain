#!/usr/bin/env php
<?php

$generator = new class {
    static array $words = [
        'skausmas',
        'kančia',
        'pragaras',
        'dykuma',
        'tuščias gyvenimas',
        'egzistencija',
        'skerdykla',
        'mėsmalė',
        'pabaiga',
        'nepavykę santykiai',
        'pabaiga be pradžios',
        'depresija',
        'demonai',
        'velniai',
        'trauma',
        'klaidos',
        'vienišumas',
        'pagalbos šauksmas',
        'širdies skausmas',
        'skilimas',
        'puvimas',
        'šlapdriba',
        'pasėkmės',
        'tamsa',
    ];

    private array $bucket = [];

    function generator(): string
    {
        if (!$this->bucket) {
            $this->bucket = static::$words;
            shuffle($this->bucket);
        }

        return array_shift($this->bucket);
    }

    function __invoke(int $paragraphCount, int $wordCount): string
    {
        $paragraphs = array_map(
            callback: function () use ($wordCount) {
                $words = array_map(
                    callback: fn() => $this->generator(),
                    array: range(1, $wordCount),
                );

                $sentences = [];

                while ($words) {
                    $sentence = array_splice(
                        array: $words,
                        offset: 0,
                        length: rand(2, 4),
                    );

                    $sentences[] = mb_ucfirst(
                        implode(' ', $sentence)
                    );
                }

                return implode('. ', $sentences) . '.';
            },

            array: range(1, $paragraphCount),
        );

        return implode("\n\n", $paragraphs);
    }
};

echo $generator(
    paragraphCount: $argv[1] ?? 1,
    wordCount: $argv[2] ?? count($generator::$words),
);
